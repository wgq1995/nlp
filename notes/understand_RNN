from keras.models import Sequential
from keras.layers import Embedding, SimpleRNN, LSTM

# simpleRNN
model = Sequential()
model.add(Embedding(1000, 8, input_length=10))
model.add(SimpleRNN(16, return_sequences=True))
model.summary()
"""
output:
_________________________________________________________________
Layer (type)                 Output Shape              Param #   
=================================================================
embedding_1 (Embedding)      (None, 10, 8)             8000      
_________________________________________________________________
simple_rnn_1 (SimpleRNN)     (None, 10, 16)            400       
=================================================================
Total params: 8,400
Trainable params: 8,400
Non-trainable params: 0
_________________________________________________________________
参数说明：
embedding: 8000 = 1000 × 8
simpleRNN: 400 = 8 × 16 + 16 × 16 + 16 = output_size × （input_size + output_size + 1)
return_sequences： 是否返回序列，如果是False的话，就返回最后一个时间步的输出
"""

# LSTM
input_size = 15
output_size = 24
res = 4 * (input_size + output_size + 1) * output_size
print(res)
model = Sequential()
model.add(Embedding(1000, input_size, input_length=15))
model.add(LSTM(output_size,))
model.summary()
"""
3840
_________________________________________________________________
Layer (type)                 Output Shape              Param #   
=================================================================
embedding_1 (Embedding)      (None, 15, 15)            15000     
_________________________________________________________________
lstm_1 (LSTM)                (None, 24)                3840      
=================================================================
Total params: 18,840
Trainable params: 18,840
Non-trainable params: 0
_________________________________________________________________
lstm参数说明： 4 * (input_size + output_size + 1) * output_size
"""

# GRU
input_size = 22
output_size = 15
res = 3 * (output_size + input_size + 1) * output_size
print(res)

model = Sequential()
model.add(Embedding(1000, input_size, input_length=15))
model.add(GRU(output_size,))
model.summary()
"""
1710
_________________________________________________________________
Layer (type)                 Output Shape              Param #   
=================================================================
embedding_1 (Embedding)      (None, 15, 22)            22000     
_________________________________________________________________
gru_1 (GRU)                  (None, 15)                1710      
=================================================================
Total params: 23,710
Trainable params: 23,710
Non-trainable params: 0
_________________________________________________________________
GRU参数： 3 * (output_size + input_size + 1) * output_size
"""
